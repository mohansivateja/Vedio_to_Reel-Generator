# -*- coding: utf-8 -*-
"""Reel Generator .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fUjKlz-_cz4lDEsN3dt9bYSLPVT54p-j
"""

! pip install streamlit -q

!wget -q -O - ipv4.icanhazip.com

! streamlit run app.py & npx localtunnel --port 8501

import streamlit as st
import os
import random
import moviepy.editor as mp
from pathlib import Path
import time

def process_clip(start_time, video, output_path):
    """Processes and saves a subclip with error handling."""
    try:
        reel = video.subclip(start_time, start_time + 10)
        reel.write_videofile(output_path, codec='libx264', audio_codec='aac', preset='ultrafast')
    except Exception as e:
        st.error(f"Error generating reel at {start_time}s: {e}")

def split_video(input_video, num_reels=5, reel_duration=10):
    """Splits the uploaded video into unique reels sequentially."""
    video = mp.VideoFileClip(input_video)
    video_duration = video.duration

    if video_duration < reel_duration * num_reels:
        st.error("Video is too short for generating 5 unique reels.")
        return []

    reels = []
    used_times = set()

    for i in range(num_reels):
        while True:
            start_time = random.randint(0, int(video_duration - reel_duration))
            if start_time not in used_times:
                used_times.add(start_time)
                break

        output_path = f"output_reel_{i+1}.mp4"
        process_clip(start_time, video, output_path)

        if os.path.exists(output_path):
            reels.append(output_path)
        else:
            st.error(f"Error: {output_path} was not generated successfully.")

    return reels

def main():
    st.title("AI-Powered Reel Generator ðŸŽ¬")
    st.write("Upload a video to automatically generate 5 unique reels!")

    uploaded_file = st.file_uploader("Upload Video", type=["mp4", "mov", "avi"])

    if uploaded_file:
        temp_video_path = Path("temp_video.mp4")
        with open(temp_video_path, "wb") as f:
            f.write(uploaded_file.read())

        st.success("Video uploaded successfully!")

        if st.button("Generate Reels ðŸŽ¥"):
            reels = split_video(str(temp_video_path))

            if reels:
                st.success("Reels generated successfully!")
                for i, reel in enumerate(reels):
                    if os.path.exists(reel):
                        st.video(reel)
                        with open(reel, "rb") as f:
                            st.download_button(f"Download Reel {i+1}", f, file_name=f"reel_{i+1}.mp4")
                    else:
                        st.error(f"Error: {reel} was not generated successfully.")

if __name__ == "__main__":
    main()